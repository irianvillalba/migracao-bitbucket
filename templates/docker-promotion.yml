# Template Docker com Promo√ß√£o de Artefatos - Bitbucket Pipelines

image: docker:20.10.16

options:
  docker: true

definitions:
  services:
    docker:
      memory: 2048

  steps:
    # Build √∫nico - executa apenas na branch develop
    - step: &build-and-package
        name: Build Docker Image Once
        runs-on: self.hosted
        services:
          - docker
        caches:
          - docker
        script:
          # Build da imagem apenas uma vez
          - echo "üî® Building Docker image..."
          - export IMAGE_NAME="$HARBOR_REGISTRY/$HARBOR_PROJECT/$BITBUCKET_REPO_SLUG"
          - export IMAGE_TAG="${BITBUCKET_TAG:-${BITBUCKET_COMMIT:0:7}}"
          - export FULL_IMAGE_NAME="$IMAGE_NAME:$IMAGE_TAG"
          
          # Build e tag
          - docker build -t $FULL_IMAGE_NAME .
          - docker tag $FULL_IMAGE_NAME $IMAGE_NAME:latest
          
          # Security scan
          - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              aquasec/trivy:latest image --exit-code 0 --severity HIGH,CRITICAL $FULL_IMAGE_NAME
          
          # Login e push para Harbor
          - echo $HARBOR_PASSWORD | docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin
          - docker push $FULL_IMAGE_NAME
          - docker push $IMAGE_NAME:latest
          
          # Salvar informa√ß√µes da build para promo√ß√£o
          - echo "IMAGE_TAG=$IMAGE_TAG" > build.env
          - echo "IMAGE_NAME=$IMAGE_NAME" >> build.env
          - echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> build.env
          - echo "BUILD_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> build.env
          
          echo "‚úÖ Image built and pushed: $FULL_IMAGE_NAME"
        artifacts:
          - build.env

    # Promo√ß√£o para desenvolvimento
    - step: &promote-to-dev
        name: üöÄ Promote to Development
        runs-on: self.hosted
        script:
          # Carregar informa√ß√µes da build
          - source build.env
          - echo "üì¶ Promoting version: $IMAGE_TAG to Development"
          - echo "üéØ Target: Development Environment"
          
          # Verificar se imagem existe no registry
          - docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin
          - docker pull $FULL_IMAGE_NAME
          
          # Deploy para desenvolvimento
          - ssh $DEV_SERVER_USER@$DEV_SERVER_HOST "
              echo 'üîÑ Deploying to Development...' &&
              docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME -p $HARBOR_PASSWORD &&
              docker pull $FULL_IMAGE_NAME &&
              docker stop $APP_CONTAINER_NAME || true &&
              docker rm $APP_CONTAINER_NAME || true &&
              docker run -d --name $APP_CONTAINER_NAME \
                -p $DEV_APP_PORT:$APP_INTERNAL_PORT \
                -e APP_ENV=development \
                $FULL_IMAGE_NAME &&
              echo '‚úÖ Development deployment completed'
            "
          
          # Health check
          - sleep 30
          - curl -f "http://$DEV_SERVER_HOST:$DEV_APP_PORT/health" || (echo "‚ùå Health check failed" && exit 1)
          
          echo "‚úÖ Successfully promoted $IMAGE_TAG to Development"

    # Promo√ß√£o para homologa√ß√£o (manual)
    - step: &promote-to-homolog
        name: üöÄ Promote to Homologation
        runs-on: self.hosted
        trigger: manual  # Requer aprova√ß√£o manual
        script:
          # Carregar informa√ß√µes da build
          - source build.env
          - echo "üì¶ Promoting version: $IMAGE_TAG to Homologation"
          - echo "üéØ Target: Homologation Environment"
          - echo "‚ö†Ô∏è  Manual approval required for this promotion"
          
          # Verificar se imagem existe e foi validada em dev
          - docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin
          - docker pull $FULL_IMAGE_NAME
          
          # Verificar se passou pelos testes de desenvolvimento
          - echo "üîç Validating prerequisites..."
          - curl -f "http://$DEV_SERVER_HOST:$DEV_APP_PORT/health" || (echo "‚ùå Development environment not healthy" && exit 1)
          
          # Deploy para homologa√ß√£o
          - ssh $HOMOLOG_SERVER_USER@$HOMOLOG_SERVER_HOST "
              echo 'üîÑ Deploying to Homologation...' &&
              docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME -p $HARBOR_PASSWORD &&
              docker pull $FULL_IMAGE_NAME &&
              docker stop $APP_CONTAINER_NAME || true &&
              docker rm $APP_CONTAINER_NAME || true &&
              docker run -d --name $APP_CONTAINER_NAME \
                -p $HOMOLOG_APP_PORT:$APP_INTERNAL_PORT \
                -e APP_ENV=staging \
                $FULL_IMAGE_NAME &&
              echo '‚úÖ Homologation deployment completed'
            "
          
          # Health check
          - sleep 30
          - curl -f "http://$HOMOLOG_SERVER_HOST:$HOMOLOG_APP_PORT/health" || (echo "‚ùå Health check failed" && exit 1)
          
          echo "‚úÖ Successfully promoted $IMAGE_TAG to Homologation"

    # Promo√ß√£o para produ√ß√£o (manual obrigat√≥rio)
    - step: &promote-to-prod
        name: üöÄ Promote to Production
        runs-on: self.hosted
        trigger: manual  # SEMPRE manual para produ√ß√£o
        script:
          # Carregar informa√ß√µes da build
          - source build.env
          - echo "üì¶ Promoting version: $IMAGE_TAG to PRODUCTION"
          - echo "üéØ Target: PRODUCTION Environment"
          - echo "üîí CRITICAL: Production deployment requires explicit approval"
          
          # Verifica√ß√µes de seguran√ßa extras para produ√ß√£o
          - docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin
          - docker pull $FULL_IMAGE_NAME
          
          # Validar que passou em homologa√ß√£o
          - echo "üîç Validating homologation prerequisites..."
          - curl -f "http://$HOMOLOG_SERVER_HOST:$HOMOLOG_APP_PORT/health" || (echo "‚ùå Homologation environment not healthy" && exit 1)
          
          # Backup da vers√£o atual em produ√ß√£o
          - ssh $PROD_SERVER_USER@$PROD_SERVER_HOST "
              echo 'üíæ Creating backup of current production version...' &&
              docker tag \$(docker inspect --format='{{.Image}}' $APP_CONTAINER_NAME) \
                $IMAGE_NAME:backup-\$(date +%Y%m%d_%H%M%S) 2>/dev/null || echo 'No existing container to backup'
            "
          
          # Deploy para produ√ß√£o
          - ssh $PROD_SERVER_USER@$PROD_SERVER_HOST "
              echo 'üîÑ Deploying to PRODUCTION...' &&
              docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME -p $HARBOR_PASSWORD &&
              docker pull $FULL_IMAGE_NAME &&
              docker stop $APP_CONTAINER_NAME || true &&
              docker rm $APP_CONTAINER_NAME || true &&
              docker run -d --name $APP_CONTAINER_NAME \
                -p $PROD_APP_PORT:$APP_INTERNAL_PORT \
                -e APP_ENV=production \
                $FULL_IMAGE_NAME &&
              echo '‚úÖ PRODUCTION deployment completed'
            "
          
          # Health checks cr√≠ticos para produ√ß√£o
          - sleep 30
          - curl -f "$PROD_APP_URL/health" || (echo "‚ùå CRITICAL: Production health check failed!" && exit 1)
          
          # Smoke tests b√°sicos
          - curl -f "$PROD_APP_URL/api/status" || echo "‚ö†Ô∏è API status check warning"
          
          echo "‚úÖ Successfully promoted $IMAGE_TAG to PRODUCTION"

    # SonarQube analysis (uma vez por build)
    - step: &sonar-scan
        name: SonarQube Analysis
        runs-on: self.hosted
        script:
          - sonar-scanner \
              -Dsonar.projectKey="$SONAR_PROJECT_KEY" \
              -Dsonar.sources=. \
              -Dsonar.host.url="$SONAR_HOST_URL" \
              -Dsonar.login="$SONAR_TOKEN"

    # Dependency check (uma vez por build)
    - step: &dependency-check
        name: OWASP Dependency Check
        runs-on: self.hosted
        script:
          - chmod +x ./scripts/dependency-check.sh
          - ./scripts/dependency-check.sh
        artifacts:
          - dependency-check-report/**

pipelines:
  # Build principal: apenas na develop
  branches:
    develop:
      - step: *build-and-package     # Build uma √∫nica vez
      - parallel:
        - step: *sonar-scan          # An√°lise de qualidade
        - step: *dependency-check    # An√°lise de seguran√ßa
      - step: *promote-to-dev        # Deploy autom√°tico para dev

  # Promo√ß√£o: usar artefato j√° buildado
  branches:
    homolog:
      - step: *promote-to-homolog    # Manual: promover para homolog

    master:
      - step: *promote-to-prod       # Manual: promover para produ√ß√£o

  # Promo√ß√£o por tags (vers√µes espec√≠ficas)
  tags:
    'v*':
      - step:
          name: üè∑Ô∏è Tagged Release Promotion
          runs-on: self.hosted
          script:
            # Promover tag espec√≠fica para produ√ß√£o
            - export IMAGE_TAG="$BITBUCKET_TAG"
            - export IMAGE_NAME="$HARBOR_REGISTRY/$HARBOR_PROJECT/$BITBUCKET_REPO_SLUG"
            - export FULL_IMAGE_NAME="$IMAGE_NAME:$IMAGE_TAG"
            - echo "üè∑Ô∏è Promoting tagged release: $BITBUCKET_TAG"
            
            # Verificar se tag existe no registry
            - docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin
            - docker pull $FULL_IMAGE_NAME || (echo "‚ùå Tag $BITBUCKET_TAG not found in registry" && exit 1)
            
            # Continuar com promo√ß√£o para produ√ß√£o
            # ... (mesmo c√≥digo do promote-to-prod)

  # Pipelines customizados para promo√ß√£o manual de vers√µes espec√≠ficas
  custom:
    promote-specific-version:
      - variables:
          - name: SOURCE_VERSION
            default: "latest"
          - name: TARGET_ENV
            default: "homolog"
            allowed-values:
              - "homolog"
              - "production"
      - step:
          name: üéØ Promote Specific Version
          runs-on: self.hosted
          script:
            - export IMAGE_TAG="$SOURCE_VERSION"
            - export IMAGE_NAME="$HARBOR_REGISTRY/$HARBOR_PROJECT/$BITBUCKET_REPO_SLUG"
            - export FULL_IMAGE_NAME="$IMAGE_NAME:$IMAGE_TAG"
            - echo "üéØ Promoting version: $SOURCE_VERSION to $TARGET_ENV"
            
            # Verificar se vers√£o existe
            - docker login $HARBOR_REGISTRY -u $HARBOR_USERNAME --password-stdin
            - docker pull $FULL_IMAGE_NAME || (echo "‚ùå Version $SOURCE_VERSION not found" && exit 1)
            
            # Executar promo√ß√£o baseada no ambiente
            - |
              case $TARGET_ENV in
                "homolog")
                  echo "Promoting to Homologation..."
                  # L√≥gica de deploy para homolog
                  ;;
                "production")
                  echo "Promoting to Production..."
                  # L√≥gica de deploy para produ√ß√£o
                  ;;
              esac

  # Pull requests: apenas build para valida√ß√£o
  pull-requests:
    '**':
      - step:
          name: PR Validation Build
          runs-on: self.hosted
          services:
            - docker
          script:
            # Build apenas para valida√ß√£o (sem push)
            - docker build -t pr-validation:$BITBUCKET_COMMIT .
            - echo "‚úÖ PR build validated successfully"